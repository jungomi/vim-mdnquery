*mdnquery.txt*    Query the Mozilla Developer Network documentation

                                   MdnQuery

==============================================================================
CONTENTS                                                   *mdnquery-contents*

  1. Introduction ................................. |mdnquery-introduction|
  2. Usage ........................................ |mdnquery-usage|
  3. Commands ..................................... |mdnquery-commands|
  4. Functions .................................... |mdnquery-functions|
  5. Mappings ..................................... |mdnquery-mappings|
    5.1. Buffer mappings .......................... |mdnquery-mappings-buffer|
    5.2. Normal mode mappings ..................... |mdnquery-mappings-normal|
    5.3. Visual mode mappings ..................... |mdnquery-mappings-visual|
  6. Settings ..................................... |mdnquery-settings|
  7. Autocommands ................................. |mdnquery-autocmds|
  8. Keywordprg (K command) ....................... |mdnquery-keywordprg|

==============================================================================
1. Introduction                                        *mdnquery-introduction*

Query the Mozilla Developer Network documentation without leaving Vim.
A Markdown version of the documentation is loaded into a buffer. The network
requests are done asynchronously if the |job-control| feature is available
(both in NeoVim and Vim), otherwise it falls back to using |ruby|. The search
results and documentation entries are cached to avoid unnecessary requests.

==============================================================================
2. Usage                                                      *mdnquery-usage*

The basic usage is straightforward. To search for a any query call the
|:MdnQuery| command with said query and it will open a |mdnquery-buffer| with
a list of search results. If |job-control| is available, it might seem like
nothing is happening at first, but when the search finished it will be shown.
Example: >
  MdnQuery array remove
<
Inside the buffer you can open the entry under the cursor by pressing <Enter>
and press `r` to return to the list.
Often the search query is specific enough to make the first result the desired
documentation entry, and it might get annoying to manually open that every
time. For this case the |:MdnQueryFirstMatch| command exists, which simply
opens the first entry automatically.

By default the searches are limited to JavaScript but can be changed with the
setting |g:mdnquery_topics|. Additionally there are several configuration
options how the buffer should be displayed (see |mdnquery-settings|).

                                                             *mdnquery-topics*
The commands only search in the topics specified in |g:mdnquery_topics|. It is
ignored if it is not a list.
Example: >
  let g:mdnquery_topics = ['js', 'css', 'html']
  " Default
  let g:mdnquery_topics = ['js']
<
Having a global list of topics for all searches might give results containing
entries from an irrelevant topic. Instead of having to change the global
option, there exist a setting that is local to the buffer |b:mdnquery_topics|.
This can easily be combined with an |autocmd| to set the correct topics for
a specific file type.
Example: >
  autocmd FileType html let b:mdnquery_topics = ['css', 'html']
<
What if even that setting is too much of a hassle? Maybe you want to execute
just one search for a specific topic without changing the current settings.
This can be done by calling the function |mdnquery#search| or
|mdnquery#firstMatch|.
Example: >
  call mdnquery#search('link', ['css', 'html'])
  call mdnquery#firstMatch('flex align', ['css'])
<
                                                             *mdnquery-buffer*
The |mdnquery-buffer| is a unique buffer that displays all relevant
informations of this plugin. It is opened with the *:botright* command and
therefore appears at full width on the bottom of the screen, or when
|g:mdnquery_vertical| is set, it appears at full height on the very right of
the screen. The size of the buffer can be changed with the |g:mdnquery_size|
setting. By default the buffer appears after a search is completed and it is
not automatically focused, you can change this behaviour by changing the
|g:mdnquery_show_on_invoke| and |g:mdnquery_auto_focus| settings. The buffer
provides some mappings to easily navigate through the search results, see
|mdnquery-mappings-buffer|.

                                                           *mdnquery-filetype*
The file type of the |mdnquery-buffer| is set to "mdnquery" and uses the
syntax of markdown. If you lazily load any plugins for markdown, you also need
to add "mdnquery" to activate them. Having a custom file type allows you to
easily modify the settings of the buffer. For instance you can add local
mappings or set a specific option: >
  " <Tab> switches back to the previously selected window
  autocmd FileType mdnquery nnoremap <buffer> <Tab> <C-w>p
  autocmd FileType mdnquery nnoremap <buffer> q :MdnQueryToggle<CR>

  " Disable visual line wrapping
  autocmd FileType mdnquery setlocal nowrap
<

==============================================================================
3. Commands                                                *mdnquery-commands*

                                                                   *:MdnQuery*
:MdnQuery {query}       Searches for {query} and shows the list of results in
                        the |mdnquery-buffer|. The search is limited to the
                        configured topics (see |g:mdnquery_topics|).

                                                         *:MdnQueryFirstMatch*
:MdnQueryFirstMatch {query}
                        Searches for {query} and loads the first result of the
                        list into the |mdnquery-buffer|. The search is limited
                        to the configured topics (see |g:mdnquery_topics|).

                                                               *:MdnQueryList*
:MdnQueryList           Shows the list of the current search results in the
                        |mdnquery-buffer|.

                                                             *:MdnQueryToggle*
:MdnQueryToggle         Toggles the visibility of the |mdnquery-buffer|. Use
                        |mdnquery#show| and |mdnquery#hide| if you prefer to
                        show or hide it unconditionally.

==============================================================================
4. Functions                                              *mdnquery-functions*

                                                              *mdnquery#entry*
mdnquery#entry({number})
                        Opens the entry with the {number} of the current list
                        and loads it into the |mdnquery-buffer|. As long as
                        there is a list and the entry {number} exists, it is
                        loaded, regardless of whether the list is currently
                        shown.

                                                   *mdnquery#entryUnderCursor*
mdnquery#entryUnderCursor()
                        Opens the entry under the cursor. Only available in
                        |mdnquery-buffer||.

                                                         *mdnquery#firstMatch*
mdnquery#firstMatch({string}, {list})
                        Searches for {string} in the topics given by {list}
                        and loads the first result of the list into the
                        |mdnquery-buffer|.
                                                              *mdnquery#focus*
mdnquery#focus()        Sets focus to the |mdnquery-buffer|.

                                                               *mdnquery#hide*
mdnquery#hide()         Hides the |mdnquery-buffer|.

                                                               *mdnquery#list*
mdnquery#list()         Shows the list of the current search results in the
                        |mdnquery-buffer|.

                                                             *mdnquery#search*
mdnquery#search({string}, {list})
                        Searches for {string} in the topics given by {list}
                        and shows the list of results in the |mdnquery-buffer|.


                                                               *mdnquery#show*
mdnquery#show()         Shows the |mdnquery-buffer|.

                                                         *mdnquery#statusline*
mdnquery#statusline()   Returns the message that is displayed in the
                        status line of the |mdnquery-buffer|. It describes
                        what is currently being displayed.

                                                             *mdnquery#toggle*
mdnquery#toggle()       Toggles the visibility of the |mdnquery-buffer|.

                                                             *mdnquery#topics*
mdnquery#topics()       Returns the topics that are currently being used for
                        any search command (see |g:mdnquery_topics|).

==============================================================================
5. Mappings                                                *mdnquery-mappings*

------------------------------------------------------------------------------
5.1. Buffer mappings                                *mdnquery-mappings-buffer*

The following mappings are available in the |mdnquery-buffer|. If you would
like to have custom mappings with the same effect, use the respective
functions or set mappings for the |mdnquery-filetype|.

                                                           *mdnquery-buffer-r*
r                       Returns to the list of the current search results.
                        The same effect can be achieved by calling
                        |mdnquery#list|.

                                                       *mdnquery-buffer-enter*
                                                           *mdnquery-buffer-o*
<Enter>
o                       Opens the entry under the cursor. It simply calls
                        |mdnquery#entryUnderCursor|. This function is only
                        available inside the |mdnquery-buffer|. To achieve
                        a similar functionality from outside the buffer use
                        |mdnquery#entry|.

------------------------------------------------------------------------------
5.2. Normal mode mappings                           *mdnquery-mappings-normal*

                                                               *MdnqueryEntry*
[count]<Plug>MdnqueryEntry
                        Opens the entry with the number [count] of the current
                        list. If no [count] is given, it opens the first one.
                        Example: >
                          :nmap <leader>e <Plug>MdnqueryEntry
                          3<leader>e  " Opens the 3rd entry
                          <leader>e   " Opens the 1st entry
<
                                                          *MdnqueryWordsearch*
<Plug>MdnqueryWordsearch
                        Searches for the word under the cursor.

                                                      *MdnqueryWordfirstmatch*
<Plug>MdnqueryWordfirstmatch
                        Searches for the word under the cursor and opens the
                        first entry.

------------------------------------------------------------------------------
5.3. Visual mode mappings                           *mdnquery-mappings-visual*

                                                        *MdnqueryVisualsearch*
<Plug>MdnqueryVisualsearch
                        Searches for the selected text. Selections over
                        multiple lines are joined by a space and excessive
                        whitespace is removed from the entire selection.

                                                    *MdnqueryVisualfirstmatch*
<Plug>MdnqueryVisualfirstmatch
                        Searches for the selected text and opens the first
                        entry. Selections over multiple lines are joined by
                        a space and excessive whitespace is removed from the
                        entire selection.

==============================================================================
6. Settings                                                *mdnquery-settings*

                                                       *g:mdnquery_auto_focus*
g:mdnquery_auto_focus {bool} (Default: 0)
                        When set to 1, all actions invoked automatically set
                        the focus to the |mdnquery-buffer|. If you prefer to
                        focus it only after a command finishes, you can use
                        the autocommand |MdnQueryContentChange| instead.

                                                   *g:mdnquery_javascript_man*
g:mdnquery_javascript_man {string} (Default: "firstMatch")
                        Defines the behaviour of the 'keywordprg' used by the
                        |K| command for JavaScript files. When {string} is
                        "search" it executes |:MdnQuery| and "firstMatch"
                        executes |:MdnQueryFirstMatch|. If {string} is
                        anything else, the 'keywordprg' is not set.

                                                   *g:mdnquery_show_on_invoke*
g:mdnquery_show_on_invoke {bool} (Default: 0)
                        When set to 1, automatically shows the
                        |mdnquery-buffer| whenever an action is invoked. This
                        only makes a difference when the buffer is hidden.

                                                             *g:mdnquery_size*
g:mdnquery_size {number}
                        Sets the size of the |mdnquery-buffer|. When
                        |g:mdnquery_vertical| is 1, it corresponds to its
                        width, otherwise to its height.

                                                           *g:mdnquery_topics*
g:mdnquery_topics {list} (Default: ["js"])
                        Topics to search in. All commands use these topics
                        unless |b:mdnquery_topics| is present or it is not
                        a valid list, in which case it uses the default. Any
                        topic that is listed on the Mozilla Developer Network
                        search page can be used, specifically the one listed
                        in the URL.

                                                           *b:mdnquery_topics*
b:mdnquery_topics {list}
                        Same as |g:mdnquery_topics| but local to the current
                        buffer. It has a higher priority than the global
                        option.

                                                         *g:mdnquery_vertical*
g:mdnquery_vertical {bool} (Default: 0)
                        When set to 1, |mdnquery-buffer| is a vertical split,
                        otherwise it is a horizontal split.

==============================================================================
7. Autocommands                                            *mdnquery-autocmds*

                                                       *MdnQueryContentChange*
The |MdnQueryContentChange| autocommand is triggered when the content of the
|mdnquery-buffer| changes. This does not include any messages that signalise
a running job.
A simple example is to focus the buffer whenever it changes: >
  autocmd User MdnQueryContentChange call mdnquery#focus()
<

==============================================================================
8. Keywordprg (K command)                                *mdnquery-keywordprg*

The 'keywordprg' is used by the |K| command. By default it uses the "man"
command on Unix and `:help` otherwise. The default behaviour is not very
useful for many file types. This plugin automatically changes the 'keywordprg'
for JavaScript files, which can be configured with the
|g:mdnquery_javascript_man|.

As Mozilla Developer Network also provides documentation for many web
technologies, it might be desired to set the 'keywordprg' for other file
types. This can easily be done with an |autocmd|.
Example: >
  autocmd FileType html setlocal keywordprg=:MdnQueryFirstMatch
<
In this case it does not make much sense to use the same topics for the
search. The global setting |g:mdnquery_topics| could be set such that it works
for all the needed file types, but that generally not a practical solution.
Instead the buffer setting |b:mdnquery_topics| can be set, which conveniently
can also be done with an |autocmd|.
Example: >
  autocmd FileType html let b:mdnquery_topics = ['css', 'html']
  autocmd FileType html setlocal keywordprg=:MdnQuery
<
                                             *mdnquery-keywordprg-alternative*
There exist alternatives with the same functionality for situation when
'keywordprg' is not appropriate or desirable, see |MdnqueryWordsearch| and
|MdnqueryVisualsearch| and their first match variants.

vim:tw=78:ft=help:et:ts=2:sw=2:sts=2:norl
